import json
import telebot
import threading
from telebot import types
from keyboards import *

with open("config.json", 'r') as f:
    data = json.load(f)

training = False
bot = telebot.TeleBot(data["BotAPI"])

@bot.message_handler(commands=["start"])
def send_welcome(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–µ—Å—Ç–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è –ø–æ —Ñ–∏—Ç–Ω–µ—Å—É.\n–ö–∞–∫–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –±—ã–ª–∞ –±—ã —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞?", reply_markup=fitness_workout())
    bot.clear_step_handler_by_chat_id(message.chat.id)
    bot.register_next_step_handler(message, start_workout)

@bot.message_handler(content_types=["text"])
def start_workout(message):
    global training
    if message.text == "–°—Ç–æ–ø":
        if not training:
            bot.send_message(message.chat.id, "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=fitness_workout())
            return
        training = False
        bot.send_message(message.chat.id, "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞", reply_markup=fitness_workout())
        bot.send_message(message.chat.id, "–î–æ—Å—Ç—É–ø –∫ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–æ–±—Ä–µ—Å—Ç–∏ —É @Samsonova8", reply_markup=fitness_workout())
    elif message.text == "–ü—Ä–µ—Å—Å":
        if training:
            bot.send_message(message.chat.id, "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É–∂–µ –∏–¥–µ—Ç, –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É?", reply_markup=stop_workout())
            return
        bot.send_message(message.chat.id, "–ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –¥–ª—è –ø—Ä–µ—Å—Å–∞", reply_markup=stop_workout())
        training = True
        threading.Thread(target=press_workout, args=(message,)).start()
    elif message.text == "–°–ø–∏–Ω–∞":
        if training:
            bot.send_message(message.chat.id, "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É–∂–µ –∏–¥–µ—Ç, –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É?", reply_markup=stop_workout())
            return
        bot.send_message(message.chat.id, "–ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –¥–ª—è —Å–ø–∏–Ω—ã", reply_markup=stop_workout())
        training = True
        threading.Thread(target=back_workout, args=(message,)).start()
    elif message.text == "–ù–æ–≥–∏":
        if training:
            bot.send_message(message.chat.id, "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É–∂–µ –∏–¥–µ—Ç, –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É?", reply_markup=stop_workout())
            return
        bot.send_message(message.chat.id, "–ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –¥–ª—è –Ω–æ–≥", reply_markup=stop_workout())
        training = True
        threading.Thread(target=legs_workout, args=(message,)).start()
    else:
        bot.send_message(message.chat.id, "–•–º... –ù–µ –∑–Ω–∞—é –µ—â–µ —Ç–∞–∫–æ–πü´¢. –ü–æ–∫–∞ —á—Ç–æ –≤—ã–±–µ—Ä–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=fitness_workout())
    
    bot.clear_step_handler_by_chat_id(message.chat.id)
    bot.register_next_step_handler(message, start_workout)

def press_workout(message):
    global training
    for i in data["press_workout"]:
        if not training:
            return
        bot.send_message(message.chat.id, "–í–∏–¥–µ–æ —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π –¥–ª—è –ø—Ä–µ—Å—Å–∞")
        threading.Event().wait(data["sleep_time"])
    training = False

def back_workout(message):
    global training
    for i in data["back_workout"]:
        if not training:
            return
        bot.send_message(message.chat.id, "–í–∏–¥–µ–æ —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π –¥–ª—è —Å–ø–∏–Ω—ã")
        threading.Event().wait(data["sleep_time"])
    training = False

def legs_workout(message):
    global training
    for i in data["legs_workout"]:
        if not training:
            return
        bot.send_message(message.chat.id, "–í–∏–¥–µ–æ —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π –¥–ª—è –Ω–æ–≥")
        threading.Event().wait(data["sleep_time"])
    training = False

bot.polling(non_stop=True)
